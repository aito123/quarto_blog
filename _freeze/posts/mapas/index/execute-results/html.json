{
  "hash": "839d3e5276f4f459deec74241506fc9e",
  "result": {
    "markdown": "---\ntitle: \"Exploración de mapas en R\"\nsubtitle: |\n   El objetivo de este post es explorar distintas herramientas en R para elaborar mapas.\ndate: \"2022-05-22\"\ncategories: [mapas]\nimage: \"image.jpg\"\nfig-cap-location: top\nexecute:\n  echo: true\nformat:\n  html:\n    code-fold: true\n---\n\n\nEn el rubro de elaboración de mapas, existen geo-*softwares* que se especializan en la construcción de mapas estéticamente agradables y geográficamente rigurosos como es el caso de ArcGis, QGis, Google Earth, Street Maps, entre otros. No obstante, en la actualidad, R se posiciona como una opción cada vez más atractiva dado que combina gran parte de las herramientas de las aplicaciones mencionadas junto con el *command line interface (CLI)* que permite llevar un registro de las funciones aplicadas para llegar a un determinado resultado.\n\nEs así como me centraré en explorar las herramientas más recientes en R para elaborar mapas y, para probar la utilidad de estas funciones, las aplicaré a un caso práctico: lugares de interés en el [distrito de Miraflores](https://es.wikipedia.org/wiki/Distrito_de_Miraflores_(Lima)) (Lima, Perú).\n\n# El mapa\n\nLos *geo-softwares* trabajan principalmente con archivos `.shp` o shapefiles que incluye información sobre la forma del mapa y sus elementos. Por lo que si quisiéramos visualizar el mapa de Miraflores como un polígono tendríamos que dirigirnos a una galería de mapas en el formato deseado. Una página muy utilizada dado su amplia biblioteca de mapas es [GPS Perú](https://www.geogpsperu.com/) la cual cuenta con una galería de los distritos de Lima la cual podemos descargar como un archivo zipeado e importarlo como una base de datos al R. Sin embargo, resulta más conveniente apoyarse en la base de datos de *Open Street Maps* la cual se encuentra constantemente en actualización y además nos ahorra el proceso de tener de descargar un zip y abrirlo. Para ello, nos apoyaremos en el paquete `{osmdata}` y `{sf}`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#importar paquetes necesarios.\npacman::p_load(tidyverse, janitor, haven, rio, sjlabelled, flextable, knitr, kableExtra, DT, gtsummary, gt, osmdata, sf, ggmap, leaflet)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmira_map<-get_map(\n  getbb(\"Distrito de Miraflores\"), \n  source = \"stamen\", \n  maptype = \"toner-lite\", \n  color = c(\"bw\"), \n  force = TRUE #importante cuando quieres volver a llamar un mismo mapa.\n  )\n\nggmap(mira_map, darken = c(0.8, \"white\")) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mapa base-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmira_bordes<-getbb(\"Distrito de Miraflores\") %>% \n  opq() %>% \n  add_osm_feature(key = 'admin_level', value = '8') %>% \n  osmdata_sf() %>%  #ha importado miraflores y sus alrededores.\n  .$osm_multipolygons %>%  #alternativa para subsetear un objeto dentro de una lista , tan facil que da miedo.\n  mutate(\n    #agregando un repel específico\n    nudge_y=case_when(\n      name %in% \"Barranco\" ~ -0.001,\n      name %in% \"Miraflores\" ~ -0.001,\n      name %in% \"San Borja\" ~ -0.001,\n      name %in% \"San Isidro\" ~ -0.001,\n      name %in% \"Santiago de Surco\" ~ -0.001,\n      name %in% \"Surquillo\" ~ -0.001\n    ),\n    nudge_x=case_when(\n      name %in% \"Barranco\" ~ -0.001,\n      name %in% \"Miraflores\" ~ -0.001,\n      name %in% \"San Borja\" ~ -0.001,\n      name %in% \"San Isidro\" ~ -0.001,\n      name %in% \"Santiago de Surco\" ~ -0.001,\n      name %in% \"Surquillo\" ~ -0.005\n    )\n  )\n\nmira_bordes2<-mira_bordes %>% \n  filter(name %in% \"Miraflores\")\n\nggmap(mira_map, darken = c(0.8, \"white\")) +\n  #utilizando coordinate reference system (CRS) to 4326. The bounding box of the ggmap object is in WGS84 (EPSG:4326), but the actual raster is in EPSG:3857. You have to hack the bounding box of the ggmap object to be in the same CRS as the underlying data.\n  geom_sf(data= mira_bordes, aes(fill=name), inherit.aes = FALSE) + #bruh inherit aes es lo mejor\n  \n  geom_sf_label(\n    data=mira_bordes, aes(label=name, nudge_x = nudge_x, nudge_y = nudge_y), \n    inherit.aes = FALSE,\n    size = 3, \n    alpha = 0.8,\n    label.r = unit(0.5, \"lines\"), \n    label.size = 0.5) +\n  \n  coord_sf(crs = st_crs(4326)) + #para que se alineen las capas en el mismo CRS\n  \n  theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mapa limites-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_transform(mira_bordes$osm_multipolygons, crs = 3857)[1], bgMap = mira_map)\n\n\nggplot() +\n  geom_sf(data= mira_bordes$osm_multipolygons)\n\ngetbb(\"Lima, Perú\") %>%\n  opq() %>%\n  add_osm_feature(key = 'admin_level', value = '8') %>% \n  #add_osm_feature(key = \"boundary\", value = \"administrative\") %>%\n  osmdata_sf() %>% \n  st_geometry() %>% \n  plot()\n\nggplot() +\n  geom_sf(data= lima$osm_polygons)\n\nleaflet(lima) %>% \n  addTiles() %>% \n  addPolygons()\n\n#importar datos mapa base\nmira_map <- \n  get_map(getbb(\"Miraflores, Lima\")) %>% \n  ggmap()\n\n\nob1<-\n  getbb(\"Distrito de Miraflores\") %>%\n  opq() %>%\n  add_osm_feature(key = 'admin_level', value = '8') %>% \n  #add_osm_feature(key = \"boundary\", value = \"administrative\") %>%\n  osmdata_sf() \n  \n  ggplot() +\n  geom_sf(data= ob1$osm_polygons)\n  \nmad_map <- get_map(getbb(\"Lima\"), zoom = 15, maptype = \"roadmap\",source=\"osm\",color=\"bw\")\n\nggmap(mad_map)\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}